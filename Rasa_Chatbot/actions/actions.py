from typing import List, Dict, Optional
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from actions.graph_connector import GraphConnector  # ‚úÖ import

class ActionCutoffScore(Action):
    def name(self) -> str:
        return "action_cutoff_score"

    def __init__(self):
        self.db = GraphConnector()

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict) -> List[Dict]:

        # C√°c h√†m normalize nh∆∞ c≈©
        method_mapping = {
            "ri√™ng": "X√©t tuy·ªÉn ri√™ng",
            "thpt": "ƒêi·ªÉm thi t·ªët nghi·ªáp THPT",
            "t·ªët nghi·ªáp": "ƒêi·ªÉm thi t·ªët nghi·ªáp THPT",
            "tn": "ƒêi·ªÉm thi t·ªët nghi·ªáp THPT",
            "ƒë√°nh gi√° nƒÉng l·ª±c": "ƒê√°nh gi√° nƒÉng l·ª±c",
            "dgnl": "ƒê√°nh gi√° nƒÉng l·ª±c",
            "vact": "ƒê√°nh gi√° nƒÉng l·ª±c",
            "apt": "ƒê√°nh gi√° nƒÉng l·ª±c",
            "ƒë√°nh gi√° t∆∞ duy": "ƒê√°nh gi√° t∆∞ duy",
            "tsa": "ƒê√°nh gi√° t∆∞ duy",
            "dgtd": "ƒê√°nh gi√° t∆∞ duy"
        }

        def normalize_method(text: Optional[str]) -> Optional[str]:
            if not text:
                return None
            text = text.lower()
            for key, value in method_mapping.items():
                if key in text:
                    return value
            return None

        def normalize_major(text: Optional[str]) -> Optional[str]:
            if not text:
                return None
            text = text.lower()
            if any(k in text for k in ["ai", "tr√≠ tu·ªá", "khoa h·ªçc d·ªØ li·ªáu"]):
                return "cntt_ai"
            elif any(k in text for k in ["nh·∫≠t", "ngo·∫°i", "nnn"]):
                return "cntt_nnn"
            elif any(k in text for k in ["htdn", "ƒë·∫∑c th√π", "h·ª£p t√°c", "dt"]):
                return "cntt_htdn"
            return None

        major_keyword = normalize_major(tracker.get_slot("major"))
        method_keyword = normalize_method(tracker.get_slot("method"))

        # Truy v·∫•n v√† x·ª≠ l√Ω k·∫øt qu·∫£
        if major_keyword and method_keyword:
            rows = self.db.get_cutoff_by_major_and_method(major_keyword, method_keyword)
            if rows:
                message = f"**ƒêi·ªÉm chu·∫©n {method_keyword} c·ªßa ng√†nh {rows[0]['major']}**:\n"
                for row in rows:
                    message += f"- NƒÉm {row['year']}: {row['score']}\n"
            else:
                message = "‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†nh v√† ph∆∞∆°ng th·ª©c b·∫°n y√™u c·∫ßu."

        elif major_keyword:
            rows = self.db.get_all_cutoffs_by_major(major_keyword)
            if rows:
                message = f"üìå **ƒêi·ªÉm chu·∫©n c·ªßa ng√†nh {rows[0]['major']}**:\n"
                grouped = {}
                for row in rows:
                    grouped.setdefault(row["method"], []).append(f"  - NƒÉm {row['year']}: {row['score']}")
                for method, scores in grouped.items():
                    message += f"\nüëâ {method}:\n" + "\n".join(scores)
            else:
                message = "‚ùå Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm chu·∫©n cho ng√†nh b·∫°n h·ªèi."

        elif method_keyword:
            rows = self.db.get_all_cutoffs_by_method(method_keyword)
            if rows:
                message = f"üìä **ƒêi·ªÉm chu·∫©n theo ph∆∞∆°ng th·ª©c {method_keyword}**:\n"
                current_major = ""
                for row in rows:
                    if row['major'] != current_major:
                        current_major = row['major']
                        message += f"\nüìå {current_major}:\n"
                    message += f"- NƒÉm {row['year']}: {row['score']}\n"
            else:
                message = "‚ùå Kh√¥ng t√¨m th·∫•y ng√†nh n√†o c√≥ ph∆∞∆°ng th·ª©c tuy·ªÉn sinh n√†y."
        else:
            message = "‚ùó Vui l√≤ng cung c·∫•p t√™n ng√†nh ho·∫∑c ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn."

        dispatcher.utter_message(text=message)
        return []

class ActionMajorByMethod(Action):
    def name(self) -> str:
        return "action_major_by_method"

    def __init__(self):
        self.db = GraphConnector()

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict) -> List[Dict]:
        method_mapping = {
            "ri√™ng": "xtr",
            "x√©t tuy·ªÉn ri√™ng": "xtr",
            "t·ªët nghi·ªáp thpt": "tn_thpt",
            "t·ªët nghi·ªáp": "tn_thpt",
            "tn": "tn_thpt",
            "ƒë√°nh gi√° nƒÉng l·ª±c": "dgnl",
            "dgnl": "dgtd",
            "vact": "dgnl",
            "apt": "dgnl",
            "ƒë√°nh gi√° t∆∞ duy": "dgtd",
            "tsa": "dgtd",
            "dgtd": "dgtd",
            "h·ªçc b·∫°": "hb_thpt",
            "h·ªçc b·∫° thpt": "hb_thpt",
            "tuy·ªÉn th·∫≥ng": "xtt",
            "xtt": "xtt",
            "x√©t tuy·ªÉn th·∫≥ng": "xtt",
        }

        def normalize_method(text: Optional[str]) -> Optional[str]:
            if not text:
                return None
            text = text.lower()
            for key, value in method_mapping.items():
                if key in text:
                    return value
            return None
        method_keyword = normalize_method(tracker.get_slot("method"))

        if method_keyword:
            rows = self.db.get_major_by_method(method_keyword)
            if rows:
                message = f"üìå **C√°c ng√†nh c√≥ x√©t tuy·ªÉn b·∫±ng ph∆∞∆°ng th·ª©c {method_keyword}**:\n"
                for row in rows:
                    message += f"- {row['major']}\n"
            else:
                message = "‚ùå Kh√¥ng t√¨m th·∫•y ng√†nh n√†o c√≥ ph∆∞∆°ng th·ª©c tuy·ªÉn sinh n√†y."
        else:
            message = "‚ùó Vui l√≤ng cung c·∫•p t√™n ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn."

        dispatcher.utter_message(text=message)
        return []