from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher

class ActionCutoffScore(Action):
    def name(self) -> str:
        return "action_cutoff_score"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: dict) -> list:
        
        # L·∫•y slot
        major = tracker.get_slot("major")
        method = tracker.get_slot("method")

        # D·ªØ li·ªáu ƒëi·ªÉm chu·∫©n
        data = {
            "C√¥ng ngh·ªá th√¥ng tin (ƒê·∫∑c th√π - H·ª£p t√°c doanh nghi·ªáp)": {
                "X√©t tuy·ªÉn ri√™ng": "‚Ä¢ NƒÉm 2023: 289.4\n‚Ä¢ NƒÉm 2024: 288.6",
                "X√©t tuy·ªÉn b·∫±ng ƒêi·ªÉm thi T·ªët nghi·ªáp THPT": "‚Ä¢ NƒÉm 2023: 25.86\n‚Ä¢ NƒÉm 2024: 26.1"
            },
            "C√¥ng ngh·ªá th√¥ng tin (ƒê·∫∑c th√π - H·ª£p t√°c doanh nghi·ªáp), Chuy√™n ng√†nh Khoa h·ªçc d·ªØ li·ªáu v√† tr√≠ tu·ªá nh√¢n t·∫°o": {
                "X√©t tuy·ªÉn ri√™ng": "‚Ä¢ NƒÉm 2023: 298.6\n‚Ä¢ NƒÉm 2024: 298.9",
                "X√©t tuy·ªÉn b·∫±ng ƒêi·ªÉm thi T·ªët nghi·ªáp THPT": "‚Ä¢ NƒÉm 2023: 26.45\n‚Ä¢ NƒÉm 2024: 27.11"
            },
            "C√¥ng ngh·ªá th√¥ng tin (Ngo·∫°i ng·ªØ nh·∫≠t)": {
                "X√©t tuy·ªÉn ri√™ng": "‚Ä¢ NƒÉm 2023: 280.0\n‚Ä¢ NƒÉm 2024: 229.3",
                "X√©t tuy·ªÉn b·∫±ng ƒêi·ªÉm thi T·ªët nghi·ªáp THPT": "‚Ä¢ NƒÉm 2023: 25.00\n‚Ä¢ NƒÉm 2024: 25.55"
            }
        }

        # Chu·∫©n h√≥a method
        method_key = None
        if method:
            method_lower = method.lower()
            if "ri√™ng" in method_lower:
                method_key = "X√©t tuy·ªÉn ri√™ng"
            elif "thpt" in method_lower or "t·ªët nghi·ªáp" in method_lower:
                method_key = "X√©t tuy·ªÉn b·∫±ng ƒêi·ªÉm thi T·ªët nghi·ªáp THPT"

        # Chu·∫©n h√≥a major
        major_key = None
        if major:
            major_lower = major.lower()
            if "htdn" in major_lower or ("ƒë·∫∑c" in major_lower and "h·ª£p t√°c" in major_lower):
                major_key = "C√¥ng ngh·ªá th√¥ng tin (ƒê·∫∑c th√π - H·ª£p t√°c doanh nghi·ªáp)"
            elif "ai" in major_lower or "tr√≠ tu·ªá" in major_lower or "khoa h·ªçc d·ªØ li·ªáu" in major_lower:
                major_key = "C√¥ng ngh·ªá th√¥ng tin (ƒê·∫∑c th√π - H·ª£p t√°c doanh nghi·ªáp), Chuy√™n ng√†nh Khoa h·ªçc d·ªØ li·ªáu v√† tr√≠ tu·ªá nh√¢n t·∫°o"
            elif "nh·∫≠t" in major_lower or "ngo·∫°i" in major_lower or "nnn" in major_lower:
                major_key = "C√¥ng ngh·ªá th√¥ng tin (Ngo·∫°i ng·ªØ nh·∫≠t)"

        # T·∫°o k·∫øt qu·∫£ ph·∫£n h·ªìi
        message = ""

        if major_key and method_key:
            # Tr∆∞·ªùng h·ª£p c√≥ ƒë·ªß ng√†nh v√† ph∆∞∆°ng th·ª©c
            scores = data.get(major_key, {}).get(method_key)
            if scores:
                message = f"**ƒêi·ªÉm chu·∫©n {method_key} c·ªßa {major_key}**:\n{scores}"
            else:
                message = "Xin l·ªói, kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†nh v√† ph∆∞∆°ng th·ª©c b·∫°n y√™u c·∫ßu."
        elif major_key:
            # Ch·ªâ c√≥ ng√†nh, tr·∫£ v·ªÅ t·∫•t c·∫£ ph∆∞∆°ng th·ª©c cho ng√†nh ƒë√≥
            scores_all = data.get(major_key)
            if scores_all:
                message = f"**ƒêi·ªÉm chu·∫©n c·ªßa {major_key}**:\n"
                for method_name, score in scores_all.items():
                    message += f"\nüëâ {method_name}:\n{score}\n"
            else:
                message = "Xin l·ªói, kh√¥ng t√¨m th·∫•y th√¥ng tin cho ng√†nh b·∫°n h·ªèi."
        elif method_key:
            # Ch·ªâ c√≥ ph∆∞∆°ng th·ª©c, tr·∫£ v·ªÅ t·∫•t c·∫£ ng√†nh √°p d·ª•ng ph∆∞∆°ng th·ª©c ƒë√≥
            message = f"**ƒêi·ªÉm chu·∫©n theo ph∆∞∆°ng th·ª©c {method_key}**:\n"
            found = False
            for major_name, methods in data.items():
                if method_key in methods:
                    found = True
                    message += f"\nüëâ {major_name}:\n{methods[method_key]}\n"
            if not found:
                message = "Kh√¥ng t√¨m th·∫•y ng√†nh n√†o c√≥ ph∆∞∆°ng th·ª©c tuy·ªÉn sinh nh∆∞ b·∫°n h·ªèi."
        else:
            # Kh√¥ng c√≥ c·∫£ 2, tr·∫£ v·ªÅ to√†n b·ªô
            message = "**T·∫•t c·∫£ ƒëi·ªÉm chu·∫©n hi·ªán c√≥:**\n"
            for major_name, methods in data.items():
                message += f"\nüìå {major_name}:\n"
                for method_name, score in methods.items():
                    message += f"- {method_name}:\n{score}\n"

        dispatcher.utter_message(text=message)
        return []
