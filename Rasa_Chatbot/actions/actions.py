from typing import List, Dict, Optional
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from actions.graph_connector import GraphConnector  # ‚úÖ import

class ActionCutoffScore(Action):
    def name(self) -> str:
        return "action_cutoff_score"

    def __init__(self):
        self.db = GraphConnector()

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict) -> List[Dict]:

        # C√°c h√†m normalize nh∆∞ c≈©
        method_mapping = {
            "ri√™ng": "X√©t tuy·ªÉn ri√™ng",
            "thpt": "ƒêi·ªÉm thi t·ªët nghi·ªáp THPT",
            "t·ªët nghi·ªáp": "ƒêi·ªÉm thi t·ªët nghi·ªáp THPT",
            "tn": "ƒêi·ªÉm thi t·ªët nghi·ªáp THPT",
            "ƒë√°nh gi√° nƒÉng l·ª±c": "ƒê√°nh gi√° nƒÉng l·ª±c",
            "dgnl": "ƒê√°nh gi√° nƒÉng l·ª±c",
            "vact": "ƒê√°nh gi√° nƒÉng l·ª±c",
            "apt": "ƒê√°nh gi√° nƒÉng l·ª±c",
            "ƒë√°nh gi√° t∆∞ duy": "ƒê√°nh gi√° t∆∞ duy",
            "tsa": "ƒê√°nh gi√° t∆∞ duy",
            "dgtd": "ƒê√°nh gi√° t∆∞ duy"
        }

        def normalize_method(text: Optional[str]) -> Optional[str]:
            if not text:
                return None
            text = text.lower()
            for key, value in method_mapping.items():
                if key in text:
                    return value
            return None

        def normalize_major(text: Optional[str]) -> Optional[str]:
            if not text:
                return None
            text = text.lower()
            if any(k in text for k in ["ai", "tr√≠ tu·ªá", "khoa h·ªçc d·ªØ li·ªáu"]):
                return "cntt_ai"
            elif any(k in text for k in ["nh·∫≠t", "ngo·∫°i", "nnn"]):
                return "cntt_nnn"
            elif any(k in text for k in ["htdn", "ƒë·∫∑c th√π", "h·ª£p t√°c", "dt"]):
                return "cntt_htdn"
            return None

        major_keyword = normalize_major(tracker.get_slot("major"))
        method_keyword = normalize_method(tracker.get_slot("method"))

        # Truy v·∫•n v√† x·ª≠ l√Ω k·∫øt qu·∫£
        if major_keyword and method_keyword:
            rows = self.db.get_cutoff_by_major_and_method(major_keyword, method_keyword)
            if rows:
                message = f"**ƒêi·ªÉm chu·∫©n {method_keyword} c·ªßa ng√†nh {rows[0]['major']}**:\n"
                for row in rows:
                    message += f"- NƒÉm {row['year']}: {row['score']}\n"
            else:
                message = "‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†nh v√† ph∆∞∆°ng th·ª©c b·∫°n y√™u c·∫ßu."

        elif major_keyword:
            rows = self.db.get_all_cutoffs_by_major(major_keyword)
            if rows:
                message = f"üìå **ƒêi·ªÉm chu·∫©n c·ªßa ng√†nh {rows[0]['major']}**:\n"
                grouped = {}
                for row in rows:
                    grouped.setdefault(row["method"], []).append(f"  - NƒÉm {row['year']}: {row['score']}")
                for method, scores in grouped.items():
                    message += f"\nüëâ {method}:\n" + "\n".join(scores)
            else:
                message = "‚ùå Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm chu·∫©n cho ng√†nh b·∫°n h·ªèi."

        elif method_keyword:
            rows = self.db.get_all_cutoffs_by_method(method_keyword)
            if rows:
                message = f"üìä **ƒêi·ªÉm chu·∫©n theo ph∆∞∆°ng th·ª©c {method_keyword}**:\n"
                current_major = ""
                for row in rows:
                    if row['major'] != current_major:
                        current_major = row['major']
                        message += f"\nüìå {current_major}:\n"
                    message += f"- NƒÉm {row['year']}: {row['score']}\n"
            else:
                message = "‚ùå Kh√¥ng t√¨m th·∫•y ng√†nh n√†o c√≥ ph∆∞∆°ng th·ª©c tuy·ªÉn sinh n√†y."
        else:
            message = "‚ùó Vui l√≤ng cung c·∫•p t√™n ng√†nh ho·∫∑c ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn."

        dispatcher.utter_message(text=message)
        return []

class ActionMajorByMethod(Action):
    def name(self) -> str:
        return "action_major_by_method"

    def __init__(self):
        self.db = GraphConnector()

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict) -> List[Dict]:
        method_mapping = {
            "ri√™ng": "xtr",
            "x√©t tuy·ªÉn ri√™ng": "xtr",
            "t·ªët nghi·ªáp thpt": "tn_thpt",
            "t·ªët nghi·ªáp": "tn_thpt",
            "tn": "tn_thpt",
            "ƒë√°nh gi√° nƒÉng l·ª±c": "dgnl",
            "dgnl": "dgtd",
            "vact": "dgnl",
            "apt": "dgnl",
            "ƒë√°nh gi√° t∆∞ duy": "dgtd",
            "tsa": "dgtd",
            "dgtd": "dgtd",
            "h·ªçc b·∫°": "hb_thpt",
            "h·ªçc b·∫° thpt": "hb_thpt",
            "tuy·ªÉn th·∫≥ng": "xtt",
            "xtt": "xtt",
            "x√©t tuy·ªÉn th·∫≥ng": "xtt",
        }

        def normalize_method(text: Optional[str]) -> Optional[str]:
            if not text:
                return None
            text = text.lower()
            for key, value in method_mapping.items():
                if key in text:
                    return value
            return None
        method_keyword = normalize_method(tracker.get_slot("method"))

        if method_keyword:
            rows = self.db.get_major_by_method(method_keyword)
            if rows:
                message = f"üìå **C√°c ng√†nh c√≥ x√©t tuy·ªÉn b·∫±ng ph∆∞∆°ng th·ª©c {method_keyword}**:\n"
                for row in rows:
                    message += f"- {row['major']}\n"
            else:
                message = "‚ùå Kh√¥ng t√¨m th·∫•y ng√†nh n√†o c√≥ ph∆∞∆°ng th·ª©c tuy·ªÉn sinh n√†y."
        else:
            message = "‚ùó Vui l√≤ng cung c·∫•p t√™n ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn."

        dispatcher.utter_message(text=message)
        return []
    
class ActionCombinationMajor(Action):
    def name(self) -> str:
        return "action_combination_major"

    def __init__(self):
        self.db = GraphConnector()

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict) -> List[Dict]:

        # √Ånh x·∫° t·ª´ t√™n vi·∫øt t·∫Øt ho·∫∑c t·ª´ kh√≥a sang t√™n ƒë·∫ßy ƒë·ªß c·ªßa ng√†nh
        major_mapping = {
            # C√¥ng ngh·ªá th√¥ng tin
            "cntt ƒë·∫∑c th√π": "C√¥ng ngh·ªá th√¥ng tin (ƒê·∫∑c th√π - H·ª£p t√°c doanh nghi·ªáp)",
            "cntt htdn": "C√¥ng ngh·ªá th√¥ng tin (ƒê·∫∑c th√π - H·ª£p t√°c doanh nghi·ªáp)",
            "c√¥ng ngh·ªá th√¥ng tin ƒë·∫∑c th√π": "C√¥ng ngh·ªá th√¥ng tin (ƒê·∫∑c th√π - H·ª£p t√°c doanh nghi·ªáp)",
            "cntt nh·∫≠t": "C√¥ng ngh·ªá th√¥ng tin (ngo·∫°i ng·ªØ Nh·∫≠t)",
            "cntt ti·∫øng nh·∫≠t": "C√¥ng ngh·ªá th√¥ng tin (ngo·∫°i ng·ªØ Nh·∫≠t)",
            "cntt nn nh·∫≠t": "C√¥ng ngh·ªá th√¥ng tin (ngo·∫°i ng·ªØ Nh·∫≠t)",
            "c√¥ng ngh·ªá th√¥ng tin ngo·∫°i ng·ªØ nh·∫≠t": "C√¥ng ngh·ªá th√¥ng tin (ngo·∫°i ng·ªØ Nh·∫≠t)",
            "cntt ai": "C√¥ng ngh·ªá th√¥ng tin (ƒê·∫∑c th√π - H·ª£p t√°c doanh nghi·ªáp), chuy√™n ng√†nh Khoa h·ªçc d·ªØ li·ªáu v√† Tr√≠ tu·ªá nh√¢n t·∫°o",
            "cntt khdl": "C√¥ng ngh·ªá th√¥ng tin (ƒê·∫∑c th√π - H·ª£p t√°c doanh nghi·ªáp), chuy√™n ng√†nh Khoa h·ªçc d·ªØ li·ªáu v√† Tr√≠ tu·ªá nh√¢n t·∫°o",
            "cntt khdl & ttnt": "C√¥ng ngh·ªá th√¥ng tin (ƒê·∫∑c th√π - H·ª£p t√°c doanh nghi·ªáp), chuy√™n ng√†nh Khoa h·ªçc d·ªØ li·ªáu v√† Tr√≠ tu·ªá nh√¢n t·∫°o",
            "c√¥ng ngh·ªá th√¥ng tin tr√≠ tu·ªá nh√¢n t·∫°o": "C√¥ng ngh·ªá th√¥ng tin (ƒê·∫∑c th√π - H·ª£p t√°c doanh nghi·ªáp), chuy√™n ng√†nh Khoa h·ªçc d·ªØ li·ªáu v√† Tr√≠ tu·ªá nh√¢n t·∫°o",
            "c√¥ng ngh·ªá th√¥ng tin khoa h·ªçc d·ªØ li·ªáu": "C√¥ng ngh·ªá th√¥ng tin (ƒê·∫∑c th√π - H·ª£p t√°c doanh nghi·ªáp), chuy√™n ng√†nh Khoa h·ªçc d·ªØ li·ªáu v√† Tr√≠ tu·ªá nh√¢n t·∫°o",
            
            # K·ªπ thu·∫≠t m√°y t√≠nh
            "ktmt": "K·ªπ thu·∫≠t m√°y t√≠nh",
            "k·ªπ thu·∫≠t m√°y t√≠nh": "K·ªπ thu·∫≠t m√°y t√≠nh",
            
            # C√¥ng ngh·ªá sinh h·ªçc
            "cnsh": "C√¥ng ngh·ªá sinh h·ªçc",
            "c√¥ng ngh·ªá sinh h·ªçc": "C√¥ng ngh·ªá sinh h·ªçc",
            "cnsh y d∆∞·ª£c": "C√¥ng ngh·ªá sinh h·ªçc, chuy√™n ng√†nh C√¥ng ngh·ªá sinh h·ªçc Y D∆∞·ª£c",
            "cnsh yd": "C√¥ng ngh·ªá sinh h·ªçc, chuy√™n ng√†nh C√¥ng ngh·ªá sinh h·ªçc Y D∆∞·ª£c",
            "c√¥ng ngh·ªá sinh h·ªçc y d∆∞·ª£c": "C√¥ng ngh·ªá sinh h·ªçc, chuy√™n ng√†nh C√¥ng ngh·ªá sinh h·ªçc Y D∆∞·ª£c",
            
            # C√¥ng ngh·ªá k·ªπ thu·∫≠t v·∫≠t li·ªáu x√¢y d·ª±ng
            "cnkt vlxd": "C√¥ng ngh·ªá k·ªπ thu·∫≠t v·∫≠t li·ªáu x√¢y d·ª±ng",
            "c√¥ng ngh·ªá k·ªπ thu·∫≠t v·∫≠t li·ªáu x√¢y d·ª±ng": "C√¥ng ngh·ªá k·ªπ thu·∫≠t v·∫≠t li·ªáu x√¢y d·ª±ng",
            
            # C√¥ng ngh·ªá ch·∫ø t·∫°o m√°y
            "cnctm": "C√¥ng ngh·ªá ch·∫ø t·∫°o m√°y",
            "c√¥ng ngh·ªá ch·∫ø t·∫°o m√°y": "C√¥ng ngh·ªá ch·∫ø t·∫°o m√°y",
            
            # Qu·∫£n l√Ω c√¥ng nghi·ªáp
            "qlcn": "Qu·∫£n l√Ω c√¥ng nghi·ªáp",
            "qu·∫£n l√Ω c√¥ng nghi·ªáp": "Qu·∫£n l√Ω c√¥ng nghi·ªáp",
            
            # C√¥ng ngh·ªá d·∫ßu kh√≠ v√† khai th√°c d·∫ßu
            "cndk&ktd": "C√¥ng ngh·ªá d·∫ßu kh√≠ v√† khai th√°c d·∫ßu",
            "c√¥ng ngh·ªá d·∫ßu kh√≠": "C√¥ng ngh·ªá d·∫ßu kh√≠ v√† khai th√°c d·∫ßu",
            "c√¥ng ngh·ªá d·∫ßu kh√≠ v√† khai th√°c d·∫ßu": "C√¥ng ngh·ªá d·∫ßu kh√≠ v√† khai th√°c d·∫ßu",
            
            # Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o k·ªπ s∆∞ ch·∫•t l∆∞·ª£ng cao Vi·ªát - Ph√°p (PFIEV)
            "pfiev": "Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o k·ªπ s∆∞ ch·∫•t l∆∞·ª£ng cao Vi·ªát - Ph√°p (PFIEV)",
            "k·ªπ s∆∞ ch·∫•t l∆∞·ª£ng cao vi·ªát - ph√°p": "Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o k·ªπ s∆∞ ch·∫•t l∆∞·ª£ng cao Vi·ªát - Ph√°p (PFIEV)",
            "ctƒët k·ªπ s∆∞ clc vi·ªát - ph√°p": "Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o k·ªπ s∆∞ ch·∫•t l∆∞·ª£ng cao Vi·ªát - Ph√°p (PFIEV)",
            
            # K·ªπ thu·∫≠t C∆° kh√≠
            "ktck ckƒël": "K·ªπ thu·∫≠t C∆° kh√≠, chuy√™n ng√†nh C∆° kh√≠ ƒë·ªông l·ª±c",
            "c∆° kh√≠ ƒë·ªông l·ª±c": "K·ªπ thu·∫≠t C∆° kh√≠, chuy√™n ng√†nh C∆° kh√≠ ƒë·ªông l·ª±c",
            "ktck chuy√™n ng√†nh c∆° kh√≠ ƒë·ªông l·ª±c": "K·ªπ thu·∫≠t C∆° kh√≠, chuy√™n ng√†nh C∆° kh√≠ ƒë·ªông l·ª±c",
            "k·ªπ thu·∫≠t c∆° kh√≠ ƒë·ªông l·ª±c": "K·ªπ thu·∫≠t C∆° kh√≠, chuy√™n ng√†nh C∆° kh√≠ ƒë·ªông l·ª±c",
            "ktck ckhk": "K·ªπ thu·∫≠t C∆° kh√≠, chuy√™n ng√†nh C∆° kh√≠ h√†ng kh√¥ng",
            "k·ªπ thu·∫≠t c∆° kh√≠ h√†ng kh√¥ng": "K·ªπ thu·∫≠t C∆° kh√≠, chuy√™n ng√†nh C∆° kh√≠ h√†ng kh√¥ng",
            "c∆° kh√≠ h√†ng kh√¥ng": "K·ªπ thu·∫≠t C∆° kh√≠, chuy√™n ng√†nh C∆° kh√≠ h√†ng kh√¥ng",
            "ktck chuy√™n ng√†nh ckhk": "K·ªπ thu·∫≠t C∆° kh√≠, chuy√™n ng√†nh C∆° kh√≠ h√†ng kh√¥ng",
            
            # K·ªπ thu·∫≠t C∆° ƒëi·ªán t·ª≠
            "ktcƒët": "K·ªπ thu·∫≠t C∆° ƒëi·ªán t·ª≠",
            "k·ªπ thu·∫≠t c∆° ƒëi·ªán t·ª≠": "K·ªπ thu·∫≠t C∆° ƒëi·ªán t·ª≠",
            "c∆° ƒëi·ªán t·ª≠": "K·ªπ thu·∫≠t C∆° ƒëi·ªán t·ª≠",
            
            # K·ªπ thu·∫≠t nhi·ªát
            "ktn": "K·ªπ thu·∫≠t nhi·ªát",
            "k·ªπ thu·∫≠t nhi·ªát": "K·ªπ thu·∫≠t nhi·ªát",
            "ktn qlnl": "K·ªπ thu·∫≠t Nhi·ªát, Chuy√™n ng√†nh Qu·∫£n l√Ω nƒÉng l∆∞·ª£ng",
            "k·ªπ thu·∫≠t nhi·ªát qu·∫£n l√Ω nƒÉng l∆∞·ª£ng": "K·ªπ thu·∫≠t Nhi·ªát, Chuy√™n ng√†nh Qu·∫£n l√Ω nƒÉng l∆∞·ª£ng",
            "ktn chuy√™n ng√†nh qlnl": "K·ªπ thu·∫≠t Nhi·ªát, Chuy√™n ng√†nh Qu·∫£n l√Ω nƒÉng l∆∞·ª£ng",
            "k·ªπ thu·∫≠t nhi·ªát qlnl": "K·ªπ thu·∫≠t Nhi·ªát, Chuy√™n ng√†nh Qu·∫£n l√Ω nƒÉng l∆∞·ª£ng",
            
            # K·ªπ thu·∫≠t T√†u th·ªßy
            "kttt": "K·ªπ thu·∫≠t T√†u th·ªßy",
            "k·ªπ thu·∫≠t t√†u th·ªßy": "K·ªπ thu·∫≠t T√†u th·ªßy",
            
            # K·ªπ thu·∫≠t ƒêi·ªán
            "ktƒë": "K·ªπ thu·∫≠t ƒêi·ªán",
            "k·ªπ thu·∫≠t ƒëi·ªán": "K·ªπ thu·∫≠t ƒêi·ªán",
            
            # K·ªπ thu·∫≠t ƒëi·ªán t·ª≠ - vi·ªÖn th√¥ng
            "ktƒët-vt": "K·ªπ thu·∫≠t ƒëi·ªán t·ª≠ - vi·ªÖn th√¥ng",
            "k·ªπ thu·∫≠t ƒëi·ªán t·ª≠ - vi·ªÖn th√¥ng": "K·ªπ thu·∫≠t ƒëi·ªán t·ª≠ - vi·ªÖn th√¥ng",
            "ktƒët vi·ªÖn th√¥ng": "K·ªπ thu·∫≠t ƒëi·ªán t·ª≠ - vi·ªÖn th√¥ng",
            "k·ªπ thu·∫≠t ƒëi·ªán t·ª≠ vi·ªÖn th√¥ng": "K·ªπ thu·∫≠t ƒëi·ªán t·ª≠ - vi·ªÖn th√¥ng",
            
            # K·ªπ thu·∫≠t ƒêi·ªÅu khi·ªÉn v√† T·ª± ƒë·ªông h√≥a
            "ktƒëk&tƒëh": "K·ªπ thu·∫≠t ƒêi·ªÅu khi·ªÉn v√† T·ª± ƒë·ªông h√≥a",
            "k·ªπ thu·∫≠t ƒëi·ªÅu khi·ªÉn v√† t·ª± ƒë·ªông h√≥a": "K·ªπ thu·∫≠t ƒêi·ªÅu khi·ªÉn v√† T·ª± ƒë·ªông h√≥a",
            "ktƒëk v√† tƒëh": "K·ªπ thu·∫≠t ƒêi·ªÅu khi·ªÉn v√† T·ª± ƒë·ªông h√≥a",
            "k·ªπ thu·∫≠t ƒëi·ªÅu khi·ªÉn t·ª± ƒë·ªông h√≥a": "K·ªπ thu·∫≠t ƒêi·ªÅu khi·ªÉn v√† T·ª± ƒë·ªông h√≥a",
            
            # K·ªπ thu·∫≠t h√≥a h·ªçc
            "kthh": "K·ªπ thu·∫≠t h√≥a h·ªçc",
            "k·ªπ thu·∫≠t h√≥a h·ªçc": "K·ªπ thu·∫≠t h√≥a h·ªçc",
            
            # K·ªπ thu·∫≠t m√¥i tr∆∞·ªùng
            "ktmt": "K·ªπ thu·∫≠t m√¥i tr∆∞·ªùng",
            "k·ªπ thu·∫≠t m√¥i tr∆∞·ªùng": "K·ªπ thu·∫≠t m√¥i tr∆∞·ªùng",
            
            # K·ªπ thu·∫≠t h·ªá th·ªëng c√¥ng nghi·ªáp
            "kthtcn": "K·ªπ thu·∫≠t h·ªá th·ªëng c√¥ng nghi·ªáp",
            "k·ªπ thu·∫≠t h·ªá th·ªëng c√¥ng nghi·ªáp": "K·ªπ thu·∫≠t h·ªá th·ªëng c√¥ng nghi·ªáp",
            
            # Ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn Vi·ªát-M·ªπ
            "cttt ktƒëtvt": "Ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn Vi·ªát-M·ªπ ng√†nh K·ªπ thu·∫≠t ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng",
            "ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn k·ªπ thu·∫≠t ƒëi·ªán t·ª≠ vi·ªÖn th√¥ng": "Ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn Vi·ªát-M·ªπ ng√†nh K·ªπ thu·∫≠t ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng",
            "cttt vi·ªát-m·ªπ ktƒëtvt": "Ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn Vi·ªát-M·ªπ ng√†nh K·ªπ thu·∫≠t ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng",
            "ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn ktƒëtvt": "Ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn Vi·ªát-M·ªπ ng√†nh K·ªπ thu·∫≠t ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng",
            
            "cttt htn&iot": "Ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn Vi·ªát-M·ªπ ng√†nh H·ªá th·ªëng Nh√∫ng v√† IoT",
            "ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn h·ªá th·ªëng nh√∫ng v√† iot": "Ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn Vi·ªát-M·ªπ ng√†nh H·ªá th·ªëng Nh√∫ng v√† IoT",
            "cttt vi·ªát-m·ªπ htn v√† iot": "Ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn Vi·ªát-M·ªπ ng√†nh H·ªá th·ªëng Nh√∫ng v√† IoT",
            "ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn h·ªá th·ªëng nh√∫ng": "Ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn Vi·ªát-M·ªπ ng√†nh H·ªá th·ªëng Nh√∫ng v√† IoT",
            
            # C√¥ng ngh·ªá th·ª±c ph·∫©m
            "cntp": "C√¥ng ngh·ªá th·ª±c ph·∫©m",
            "c√¥ng ngh·ªá th·ª±c ph·∫©m": "C√¥ng ngh·ªá th·ª±c ph·∫©m",
            
            # Ki·∫øn tr√∫c
            "kt": "Ki·∫øn tr√∫c",
            "ki·∫øn tr√∫c": "Ki·∫øn tr√∫c",
            
            # K·ªπ thu·∫≠t x√¢y d·ª±ng
            "ktxd xddd&cn": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh X√¢y d·ª±ng d√¢n d·ª•ng v√† c√¥ng nghi·ªáp",
            "k·ªπ thu·∫≠t x√¢y d·ª±ng d√¢n d·ª•ng v√† c√¥ng nghi·ªáp": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh X√¢y d·ª±ng d√¢n d·ª•ng v√† c√¥ng nghi·ªáp",
            "ktxd chuy√™n ng√†nh xddd&cn": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh X√¢y d·ª±ng d√¢n d·ª•ng v√† c√¥ng nghi·ªáp",
            "x√¢y d·ª±ng d√¢n d·ª•ng v√† c√¥ng nghi·ªáp": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh X√¢y d·ª±ng d√¢n d·ª•ng v√† c√¥ng nghi·ªáp",
            
            "ktxd thxd": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh Tin h·ªçc x√¢y d·ª±ng",
            "k·ªπ thu·∫≠t x√¢y d·ª±ng tin h·ªçc x√¢y d·ª±ng": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh Tin h·ªçc x√¢y d·ª±ng",
            "ktxd chuy√™n ng√†nh thxd": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh Tin h·ªçc x√¢y d·ª±ng",
            "tin h·ªçc x√¢y d·ª±ng": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh Tin h·ªçc x√¢y d·ª±ng",
            
            "ktxd ƒëttm": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh K·ªπ thu·∫≠t v√† qu·∫£n l√Ω x√¢y d·ª±ng ƒë√¥ th·ªã th√¥ng minh",
            "k·ªπ thu·∫≠t x√¢y d·ª±ng ƒë√¥ th·ªã th√¥ng minh": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh K·ªπ thu·∫≠t v√† qu·∫£n l√Ω x√¢y d·ª±ng ƒë√¥ th·ªã th√¥ng minh",
            "ktxd qlxd ƒëttm": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh K·ªπ thu·∫≠t v√† qu·∫£n l√Ω x√¢y d·ª±ng ƒë√¥ th·ªã th√¥ng minh",
            "k·ªπ thu·∫≠t v√† qu·∫£n l√Ω x√¢y d·ª±ng ƒë√¥ th·ªã th√¥ng minh": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh K·ªπ thu·∫≠t v√† qu·∫£n l√Ω x√¢y d·ª±ng ƒë√¥ th·ªã th√¥ng minh",
            
            "ktxd mhtt&ttnt": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh M√¥ h√¨nh th√¥ng tin v√† tr√≠ tu·ªá nh√¢n t·∫°o trong x√¢y d·ª±ng",
            "k·ªπ thu·∫≠t x√¢y d·ª±ng m√¥ h√¨nh th√¥ng tin v√† ttnt": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh M√¥ h√¨nh th√¥ng tin v√† tr√≠ tu·ªá nh√¢n t·∫°o trong x√¢y d·ª±ng",
            "ktxd chuy√™n ng√†nh mhtt v√† ttnt": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh M√¥ h√¨nh th√¥ng tin v√† tr√≠ tu·ªá nh√¢n t·∫°o trong x√¢y d·ª±ng",
            "k·ªπ thu·∫≠t x√¢y d·ª±ng mhtt v√† ttnt": "K·ªπ thu·∫≠t x√¢y d·ª±ng, chuy√™n ng√†nh M√¥ h√¨nh th√¥ng tin v√† tr√≠ tu·ªá nh√¢n t·∫°o trong x√¢y d·ª±ng",
            
            # K·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh th·ªßy
            "ktxdctt": "K·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh th·ªßy",
            "k·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh th·ªßy": "K·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh th·ªßy",
            
            # K·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh giao th√¥ng
            "ktxdctgt": "K·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh giao th√¥ng",
            "k·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh giao th√¥ng": "K·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh giao th√¥ng",
            "ktxdctgt ƒëstƒëc": "K·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh giao th√¥ng, Chuy√™n ng√†nh x√¢y d·ª±ng ƒë∆∞·ªùng s·∫Øt t·ªëc ƒë·ªô cao v√† ƒë∆∞·ªùng s·∫Øt ƒë√¥ th·ªã",
            "x√¢y d·ª±ng ƒë∆∞·ªùng s·∫Øt t·ªëc ƒë·ªô cao": "K·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh giao th√¥ng, Chuy√™n ng√†nh x√¢y d·ª±ng ƒë∆∞·ªùng s·∫Øt t·ªëc ƒë·ªô cao v√† ƒë∆∞·ªùng s·∫Øt ƒë√¥ th·ªã",
            "ktxdctgt chuy√™n ng√†nh ƒëstƒëc": "K·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh giao th√¥ng, Chuy√™n ng√†nh x√¢y d·ª±ng ƒë∆∞·ªùng s·∫Øt t·ªëc ƒë·ªô cao v√† ƒë∆∞·ªùng s·∫Øt ƒë√¥ th·ªã",
            "x√¢y d·ª±ng ƒë∆∞·ªùng s·∫Øt ƒë√¥ th·ªã": "K·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh giao th√¥ng, Chuy√™n ng√†nh x√¢y d·ª±ng ƒë∆∞·ªùng s·∫Øt t·ªëc ƒë·ªô cao v√† ƒë∆∞·ªùng s·∫Øt ƒë√¥ th·ªã",
            
            # Kinh t·∫ø x√¢y d·ª±ng
            "ktxd": "Kinh t·∫ø x√¢y d·ª±ng",
            "kinh t·∫ø x√¢y d·ª±ng": "Kinh t·∫ø x√¢y d·ª±ng",
            
            # K·ªπ thu·∫≠t c∆° s·ªü h·∫° t·∫ßng
            "ktcsht": "K·ªπ thu·∫≠t c∆° s·ªü h·∫° t·∫ßng",
            "k·ªπ thu·∫≠t c∆° s·ªü h·∫° t·∫ßng": "K·ªπ thu·∫≠t c∆° s·ªü h·∫° t·∫ßng",
            
            # Qu·∫£n l√Ω t√†i nguy√™n v√† m√¥i tr∆∞·ªùng
            "qltn&mt": "Qu·∫£n l√Ω t√†i nguy√™n v√† m√¥i tr∆∞·ªùng",
            "qu·∫£n l√Ω t√†i nguy√™n v√† m√¥i tr∆∞·ªùng": "Qu·∫£n l√Ω t√†i nguy√™n v√† m√¥i tr∆∞·ªùng",
            "qltnmt": "Qu·∫£n l√Ω t√†i nguy√™n v√† m√¥i tr∆∞·ªùng"
        }

        def normalize_major(text: Optional[str]) -> Optional[str]:
            if not text:
                return None
            text = text.lower().strip()
            
            # Th·ª≠ t√¨m ki·∫øm tr·ª±c ti·∫øp trong mapping
            if text in major_mapping:
                return major_mapping[text]
                
            # N·∫øu kh√¥ng t√¨m th·∫•y tr·ª±c ti·∫øp, t√¨m ki·∫øm keyword c√≥ trong text
            for key, value in major_mapping.items():
                if key in text:
                    return value
                    
            return None

        # L·∫•y th√¥ng tin t·ª´ entity major trong message
        major_entity = next(tracker.get_latest_entity_values("major"), None)
        
        # Chu·∫©n h√≥a t√™n ng√†nh
        major_keyword = normalize_major(major_entity)
        
        if major_keyword:
            # Truy v·∫•n d·ªØ li·ªáu t·ªï h·ª£p m√¥n t·ª´ Neo4j
            combinations = self.db.get_combination_subjects(major_keyword)
            
            if combinations and len(combinations) > 0:
                message = f"üìö **T·ªï h·ª£p m√¥n x√©t tuy·ªÉn c·ªßa ng√†nh {major_keyword}**:\n\n"
                for idx, combo in enumerate(combinations, 1):
                    message += f"{idx}. {combo['subject_combination']}\n"
                message += "\nüí° *B·∫°n c√≥ th·ªÉ tham kh·∫£o ƒëi·ªÉm chu·∫©n c·ªßa ng√†nh n√†y theo t·ª´ng nƒÉm v√† ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn.*"
            else:
                message = f"‚ùó Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ t·ªï h·ª£p m√¥n x√©t tuy·ªÉn cho ng√†nh **{major_keyword}**.\n\nVui l√≤ng ki·ªÉm tra l·∫°i t√™n ng√†nh ho·∫∑c li√™n h·ªá v·ªõi nh√† tr∆∞·ªùng ƒë·ªÉ bi·∫øt th√™m th√¥ng tin."
        else:
            message = "‚ùì Vui l√≤ng cho bi·∫øt t√™n ng√†nh c·ª• th·ªÉ b·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ t·ªï h·ª£p m√¥n x√©t tuy·ªÉn.\n\nV√≠ d·ª•: *\"T·ªï h·ª£p m√¥n x√©t tuy·ªÉn ng√†nh C√¥ng ngh·ªá th√¥ng tin l√† g√¨?\"*"

        dispatcher.utter_message(text=message)
        return []