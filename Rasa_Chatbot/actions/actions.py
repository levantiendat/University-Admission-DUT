from typing import List, Dict, Optional
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from actions.graph_connector import GraphConnector
from actions.mapping_utils import normalize_major, normalize_method, normalize_achievement_field  # Import c√°c h√†m ti·ªán √≠ch
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

class ActionCutoffScore(Action):
    def name(self) -> str:
        return "action_cutoff_score"

    def __init__(self):
        self.db = GraphConnector()

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict) -> List[Dict]:
            
        # L·∫•y d·ªØ li·ªáu t·ª´ tracker
        major_input = tracker.get_slot("major")
        method_input = tracker.get_slot("method")
        
        # Chu·∫©n h√≥a d·ªØ li·ªáu s·ª≠ d·ª•ng c√°c h√†m t·ª´ mapping_utils
        major_keyword = normalize_major(major_input)
        method_keyword = normalize_method(method_input)

        print(f"Normalized major: {major_keyword}, Normalized method: {method_keyword}")
        logging.debug(f"Normalized major: {major_keyword}, Normalized method: {method_keyword}")
        
        # Truy v·∫•n v√† x·ª≠ l√Ω k·∫øt qu·∫£
        if major_keyword and method_keyword:
            rows = self.db.get_cutoff_by_major_and_method(major_keyword, method_keyword)
            if rows:
                message = f"**ƒêi·ªÉm chu·∫©n ph∆∞∆°ng th·ª©c {rows[0]['method']} c·ªßa ng√†nh {rows[0]['major']}**:\n"
                for row in rows:
                    message += f"- NƒÉm {row['year']}: {row['score']}\n"
            else:
                message = "‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†nh v√† ph∆∞∆°ng th·ª©c b·∫°n y√™u c·∫ßu."

        elif major_keyword:
            rows = self.db.get_all_cutoffs_by_major(major_keyword)
            if rows:
                message = f"üìå **ƒêi·ªÉm chu·∫©n c·ªßa ng√†nh {rows[0]['major']}**:\n"
                grouped = {}
                for row in rows:
                    grouped.setdefault(row["method"], []).append(f"  - NƒÉm {row['year']}: {row['score']}")
                for method, scores in grouped.items():
                    message += f"\nüëâ {method}:\n" + "\n".join(scores)
            else:
                message = "‚ùå Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm chu·∫©n cho ng√†nh b·∫°n h·ªèi."

        elif method_keyword:
            rows = self.db.get_all_cutoffs_by_method(method_keyword)
            if rows:
                message = f"üìä **ƒêi·ªÉm chu·∫©n theo ph∆∞∆°ng th·ª©c {method_keyword}**:\n"
                current_major = ""
                for row in rows:
                    if row['major'] != current_major:
                        current_major = row['major']
                        message += f"\nüìå {current_major}:\n"
                    message += f"- NƒÉm {row['year']}: {row['score']}\n"
            else:
                message = "‚ùå Kh√¥ng t√¨m th·∫•y ng√†nh n√†o c√≥ ph∆∞∆°ng th·ª©c tuy·ªÉn sinh n√†y."
        else:
            message = "‚ùó Vui l√≤ng cung c·∫•p t√™n ng√†nh ho·∫∑c ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn."

        dispatcher.utter_message(text=message)
        return []

class ActionMajorByMethod(Action):
    def name(self) -> str:
        return "action_major_by_method"

    def __init__(self):
        self.db = GraphConnector()

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict) -> List[Dict]:
            
        # S·ª≠ d·ª•ng h√†m normalize_method t·ª´ mapping_utils
        method_keyword = normalize_method(tracker.get_slot("method"))

        if method_keyword:
            rows = self.db.get_major_by_method(method_keyword)
            if rows:
                message = f"üìå **C√°c ng√†nh c√≥ x√©t tuy·ªÉn b·∫±ng ph∆∞∆°ng th·ª©c {method_keyword}**:\n"
                for row in rows:
                    message += f"- {row['major']}\n"
            else:
                message = "‚ùå Kh√¥ng t√¨m th·∫•y ng√†nh n√†o c√≥ ph∆∞∆°ng th·ª©c tuy·ªÉn sinh n√†y."
        else:
            message = "‚ùó Vui l√≤ng cung c·∫•p t√™n ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn."

        dispatcher.utter_message(text=message)
        return []
    
class ActionCombinationMajor(Action):
    def name(self) -> str:
        return "action_combination_major"

    def __init__(self):
        self.db = GraphConnector()

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict) -> List[Dict]:

        # L·∫•y th√¥ng tin t·ª´ entity major trong message
        major_entity = next(tracker.get_latest_entity_values("major"), None)
        
        # Chu·∫©n h√≥a t√™n ng√†nh s·ª≠ d·ª•ng h√†m t·ª´ mapping_utils
        major_keyword = normalize_major(major_entity)
        
        if major_keyword:
            # Truy v·∫•n d·ªØ li·ªáu t·ªï h·ª£p m√¥n t·ª´ Neo4j
            combinations = self.db.get_combination_subjects(major_keyword)
            
            if combinations and len(combinations) > 0:
                message = f"üìö **T·ªï h·ª£p m√¥n x√©t tuy·ªÉn c·ªßa ng√†nh {combinations[0]['major']}**:\n\n"
                for idx, combo in enumerate(combinations, 1):
                    message += f"{idx}. {combo['subject_combination']}\n"
                message += "\nüí° *B·∫°n c√≥ th·ªÉ tham kh·∫£o ƒëi·ªÉm chu·∫©n c·ªßa ng√†nh n√†y theo t·ª´ng nƒÉm v√† ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn.*"
            else:
                message = f"‚ùó Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ t·ªï h·ª£p m√¥n x√©t tuy·ªÉn cho ng√†nh **{major_keyword}**.\n\nVui l√≤ng ki·ªÉm tra l·∫°i t√™n ng√†nh ho·∫∑c li√™n h·ªá v·ªõi nh√† tr∆∞·ªùng ƒë·ªÉ bi·∫øt th√™m th√¥ng tin."
        else:
            message = "‚ùì Vui l√≤ng cho bi·∫øt t√™n ng√†nh c·ª• th·ªÉ b·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ t·ªï h·ª£p m√¥n x√©t tuy·ªÉn.\n\nV√≠ d·ª•: *\"T·ªï h·ª£p m√¥n x√©t tuy·ªÉn ng√†nh C√¥ng ngh·ªá th√¥ng tin l√† g√¨?\"*"

        dispatcher.utter_message(text=message)
        return []
    
class ActionAskMethodsForMajor(Action):
    def name(self) -> str:
        return "action_ask_methods_for_major"

    def __init__(self):
        self.db = GraphConnector()

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict) -> List[Dict]:

        # L·∫•y d·ªØ li·ªáu t·ª´ tracker
        major_input = tracker.get_slot("major")
        
        # Chu·∫©n h√≥a d·ªØ li·ªáu s·ª≠ d·ª•ng h√†m t·ª´ mapping_utils
        major_keyword = normalize_major(major_input)
        
        print(f"Normalized major for methods: {major_keyword}")
        
        if major_keyword:
            # Truy v·∫•n ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn cho ng√†nh
            results = self.db.get_method_by_major(major_keyword)
            
            if results:
                # T·∫°o th√¥ng b√°o v·ªõi danh s√°ch c√°c ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn
                major_name = results[0]["major"]
                methods = [result["method"] for result in results]
                
                message = f"üìù **Ng√†nh {major_name} x√©t tuy·ªÉn b·∫±ng c√°c ph∆∞∆°ng th·ª©c sau:**\n\n"
                
                for i, method in enumerate(methods, 1):
                    message += f"{i}. {method}\n"
                
                if len(methods) == 0:
                    message = f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn cho ng√†nh {major_input}."
            else:
                message = f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn cho ng√†nh {major_input}."
        else:
            message = "‚ùì Vui l√≤ng cung c·∫•p t√™n ng√†nh c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ t√¨m ki·∫øm th√¥ng tin v·ªÅ ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn."
            
        dispatcher.utter_message(text=message)
        return []
    
class ActionAskIfMajorAcceptsMethod(Action):
    def name(self) -> str:
        return "action_ask_if_major_accepts_method"

    def __init__(self):
        self.db = GraphConnector()

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict) -> List[Dict]:

        # L·∫•y d·ªØ li·ªáu t·ª´ tracker
        major_input = tracker.get_slot("major")
        method_input = tracker.get_slot("method")
        
        # Chu·∫©n h√≥a d·ªØ li·ªáu s·ª≠ d·ª•ng c√°c h√†m t·ª´ mapping_utils
        major_keyword = normalize_major(major_input)
        method_keyword = normalize_method(method_input)
        
        print(f"Normalized major: {major_keyword}, Normalized method: {method_keyword}")
        
        if major_keyword and method_keyword:
            # Ki·ªÉm tra xem ng√†nh c√≥ x√©t tuy·ªÉn b·∫±ng ph∆∞∆°ng th·ª©c n√†y kh√¥ng
            result = self.db.check_major_has_method(major_keyword, method_keyword)
            
            if result["exists"]:
                message = f"‚úÖ **C√≥, ng√†nh {result['major_name']} c√≥ x√©t tuy·ªÉn b·∫±ng ph∆∞∆°ng th·ª©c {result['method_name']}.**"
            else:
                if result["major_name"] and result["method_name"]:
                    message = f"‚ùå **Kh√¥ng, ng√†nh {result['major_name']} kh√¥ng x√©t tuy·ªÉn b·∫±ng ph∆∞∆°ng th·ª©c {result['method_name']}.**"
                elif result["major_name"]:
                    message = f"‚ùå **Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn \"{method_input}\" cho ng√†nh {result['major_name']}.**"
                elif result["method_name"]:
                    message = f"‚ùå **Kh√¥ng t√¨m th·∫•y ng√†nh \"{major_input}\" c√≥ x√©t tuy·ªÉn b·∫±ng ph∆∞∆°ng th·ª©c {result['method_name']}.**"
                else:
                    message = f"‚ùå **Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ng√†nh \"{major_input}\" v√† ph∆∞∆°ng th·ª©c \"{method_input}\".**"
        else:
            if not major_keyword and not method_keyword:
                message = "‚ùì Vui l√≤ng cung c·∫•p c·∫£ t√™n ng√†nh v√† ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn ƒë·ªÉ t√¥i c√≥ th·ªÉ ki·ªÉm tra."
            elif not major_keyword:
                message = f"‚ùì Vui l√≤ng cung c·∫•p t√™n ng√†nh c·ª• th·ªÉ ƒë·ªÉ t√¥i ki·ªÉm tra c√≥ x√©t tuy·ªÉn b·∫±ng ph∆∞∆°ng th·ª©c \"{method_input}\" kh√¥ng."
            else:
                message = f"‚ùì Vui l√≤ng cung c·∫•p ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn c·ª• th·ªÉ ƒë·ªÉ t√¥i ki·ªÉm tra ng√†nh \"{major_input}\" c√≥ √°p d·ª•ng kh√¥ng."
            
        dispatcher.utter_message(text=message)
        return []
    
class ActionGetMajorQuota(Action):
    def name(self) -> str:
        return "action_get_major_quota"

    def __init__(self):
        self.db = GraphConnector()

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict) -> List[Dict]:

        # L·∫•y th√¥ng tin t·ª´ entity major trong message
        major_entity = next(tracker.get_latest_entity_values("major"), None)
        
        # Chu·∫©n h√≥a t√™n ng√†nh s·ª≠ d·ª•ng h√†m t·ª´ mapping_utils
        major_keyword = normalize_major(major_entity)
        
        logging.debug(f"Normalized major for quota: {major_keyword}")
        
        if major_keyword:
            # L·∫•y th√¥ng tin v·ªÅ ch·ªâ ti√™u v√† t√™n ng√†nh t·ª´ Neo4j
            result = self.db.get_major_quota_and_name(major_keyword)
            
            if result["found"]:
                if result["quota"]:
                    message = f"üìä **Ch·ªâ ti√™u tuy·ªÉn sinh ng√†nh {result['name']}**: {result['quota']} sinh vi√™n."
                    message += "\n\nüí° *L∆∞u √Ω: Ch·ªâ ti√™u c√≥ th·ªÉ thay ƒë·ªïi theo t·ª´ng nƒÉm, ƒë√¢y l√† th√¥ng tin m·ªõi nh·∫•t m√† t√¥i c√≥.*"
                else:
                    message = f"‚ùó Ng√†nh {result['name']} hi·ªán ch∆∞a c√≥ th√¥ng tin v·ªÅ ch·ªâ ti√™u tuy·ªÉn sinh."
            else:
                message = f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ng√†nh \"{major_entity}\"."
        else:
            message = "‚ùì Vui l√≤ng cho bi·∫øt t√™n ng√†nh c·ª• th·ªÉ b·∫°n mu·ªën bi·∫øt v·ªÅ ch·ªâ ti√™u tuy·ªÉn sinh.\n\nV√≠ d·ª•: *\"Ch·ªâ ti√™u ng√†nh C√¥ng ngh·ªá th√¥ng tin l√† bao nhi√™u?\"*"
            
        dispatcher.utter_message(text=message)
        return []
    
class ActionSuggestMajorByAchievement(Action):
    def name(self) -> str:
        return "action_major_by_achievement"

    def __init__(self):
        self.db = GraphConnector()

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict) -> List[Dict]:

        # L·∫•y th√¥ng tin v·ªÅ th√†nh t√≠ch/s·ªü tr∆∞·ªùng t·ª´ entity
        achievement = next(tracker.get_latest_entity_values("achievement"), None)
        
        logging.debug(f"Achievement input: {achievement}")
        
        if not achievement:
            message = "‚ùì Vui l√≤ng cho bi·∫øt th√†nh t√≠ch, s·ªü tr∆∞·ªùng ho·∫∑c lƒ©nh v·ª±c b·∫°n gi·ªèi ƒë·ªÉ t√¥i c√≥ th·ªÉ g·ª£i √Ω ng√†nh ph√π h·ª£p."
            dispatcher.utter_message(text=message)
            return []
        
        # Chu·∫©n h√≥a v√† ph√¢n lo·∫°i th√†nh t√≠ch/s·ªü tr∆∞·ªùng
        achievement_type = normalize_achievement_field(achievement)
        logging.debug(f"Normalized achievement: {achievement_type}")
        
        # Truy v·∫•n c√°c ng√†nh ph√π h·ª£p v·ªõi th√†nh t√≠ch/s·ªü tr∆∞·ªùng
        majors = self.db.get_major_by_achievement(achievement_type)
        
        if majors:
            message = f"üéØ **D·ª±a tr√™n th√†nh t√≠ch c·ªßa b·∫°n v·ªÅ {achievement_type}, nh·ªØng ng√†nh sau b·∫°n c√≥ th·ªÉ x√©t tuy·ªÉn:**\n\n"
            
            for i, major_info in enumerate(majors, 1):
                message += f"{i}. {major_info['major']}\n"
            
            message += "\nüí° *B·∫°n c√≥ th·ªÉ t√¨m hi·ªÉu th√™m v·ªÅ ƒëi·ªÉm chu·∫©n, t·ªï h·ª£p m√¥n v√† ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn c·ªßa c√°c ng√†nh n√†y.*"
        else:
            message = f"‚ùó Th√†nh t√≠ch '{achievement_type} kh√¥ng t√¨m th·∫•y ng√†nh ph√π h·ª£p'.\n\nVui l√≤ng chia s·∫ª th√™m v·ªÅ th√†nh t√≠ch kh√°c ƒë·ªÉ t√¥i t∆∞ v·∫•n t·ªët h∆°n."
        
        dispatcher.utter_message(text=message)
        return []

    